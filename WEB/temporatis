document.addEventListener("DOMContentLoaded", () => {
    const toggleModeBtn = document.getElementById("toggleMode");
    const autoModeDiv = document.getElementById("autoMode");
    const manualModeDiv = document.getElementById("manualMode");
    const refreshDataBtn = document.getElementById("refreshData");
    const ecowattDataDiv = document.getElementById("ecowattData");
    const relayButtons = document.querySelectorAll(".relay-btn");

    let currentMode = "auto"; // Valeur par d√©faut
    let isModeLoaded = false; // Variable pour v√©rifier si l'√©tat du mode est charg√©

    // Charger l'√©tat actuel du mode au d√©marrage
    async function fetchCurrentMode() {
        try {
            const response = await fetch("http://127.0.0.1:8000/mode");
            if (!response.ok) {
                throw new Error("Erreur lors de la r√©cup√©ration de l'√©tat du mode");
            }
            const data = await response.json();
            currentMode = data.mode || "auto";  // Valeur par d√©faut "auto"
            isModeLoaded = true; // Mode charg√© avec succ√®s
            updateModeUI();  // Met √† jour l'interface utilisateur
        } catch (error) {
            console.error("Erreur lors de la r√©cup√©ration du mode :", error);
            currentMode = "auto";  // Valeur par d√©faut en cas d'erreur
            isModeLoaded = true; // Mode charg√© m√™me en cas d'erreur
            updateModeUI();  // Met √† jour l'interface utilisateur
        }
    }

    function updateModeUI() {
        autoModeDiv.classList.toggle("hidden", currentMode === "manual");
        manualModeDiv.classList.toggle("hidden", currentMode === "auto");
        toggleModeBtn.textContent = `Passer au mode ${currentMode === "auto" ? "manuel" : "automatique"}`;
        toggleModeBtn.disabled = !isModeLoaded; // D√©sactive le bouton jusqu'√† ce que le mode soit charg√©
    }

    toggleModeBtn.addEventListener("click", async () => {
        if (!isModeLoaded) return; // Emp√™che les changements avant que le mode soit charg√©
        console.log(`üìå Avant changement: ${currentMode}`);
        currentMode = currentMode === "auto" ? "manual" : "auto";
        console.log(`‚úÖ Apr√®s changement: ${currentMode}`);

        manualModeDiv.classList.toggle("hidden", currentMode === "auto");
        autoModeDiv.classList.toggle("hidden", currentMode === "manual");

        // Effacer le tableau si on passe en mode manuel
        if (currentMode === "manual") {
            const tableBody = document.querySelector("#ecowattTable tbody");
            tableBody.innerHTML = ""; // Effacer les donn√©es du tableau
        }

        toggleModeBtn.textContent = `Passer au mode ${currentMode === "auto" ? "manuel" : "automatique"}`;

        // Redemander les donn√©es EcoWatt si on passe en mode automatique
        if (currentMode === "auto") {
            fetchEcowattData();
        }

        try {
            await fetch("http://127.0.0.1:8000/mode", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ mode: currentMode })
            });
        } catch (error) {
            console.error("Erreur lors du changement de mode:", error);
        }
    });

    // Fonction pour r√©cup√©rer et afficher les donn√©es EcoWatt avec des checkboxes pour hvalue
    async function fetchEcowattData() {
        try {
            const response = await fetch("http://127.0.0.1:8000/ecowatt");
            if (!response.ok) {
                throw new Error("Erreur lors de la r√©cup√©ration des donn√©es EcoWatt");
            }
            const data = await response.json();
            const signals = data.data.signals;

            // Cr√©ation du tableau des donn√©es
            const tableBody = document.querySelector("#ecowattTable tbody");
            tableBody.innerHTML = ""; // Clear the previous data

            signals.forEach(signal => {
                signal.values.forEach(value => {
                    const row = document.createElement("tr");

                    const hvalueCheckbox = value.hvalue === 1
                        ? `<input type="checkbox" class="hvalue-checkbox" data-signal="${signal.jour}" data-value="${value.pas}" checked>`
                        : `<input type="checkbox" class="hvalue-checkbox" data-signal="${signal.jour}" data-value="${value.pas}">`;

                    row.innerHTML = `
                        <td>${signal.GenerationFichier}</td>
                        <td>${signal.jour}</td>
                        <td>${signal.message}</td>
                        <td>${signal.dvalue}</td>
                        <td>${value.pas}</td>
                        <td>${hvalueCheckbox}</td>
                    `;
                    tableBody.appendChild(row);
                });
            });

            // R√©cup√©rer l'heure actuelle
            const currentDate = new Date();
            const currentHour = currentDate.getHours(); // Heure actuelle (de 0 √† 23)

            // Parcours des signaux pour v√©rifier l'heure actuelle
            signals.forEach(signal => {
                signal.values.forEach(value => {
                    // Si l'heure actuelle correspond √† un "pas" et que hvalue est 1, allumer le relais 1
                    if (currentHour === value.pas && value.hvalue === 1) {
                        controlRelay(true); // Allumer le relais 1
                    } else if (currentHour === value.pas && value.hvalue === 0) {
                        controlRelay(false); // √âteindre le relais 1
                    }
                });
            });

            // Ajout des √©v√©nements pour les checkboxes
            const checkboxes = document.querySelectorAll(".hvalue-checkbox");
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener("change", async (e) => {
                    const signal = e.target.dataset.signal;
                    const pas = e.target.dataset.value;
                    const newState = e.target.checked ? 1 : 0;
                    try {
                        await fetch("http://127.0.0.1:8000/update_hvalue", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                                signal: signal,
                                pas: pas,
                                hvalue: newState
                            })
                        });
                    } catch (error) {
                        console.error("Erreur lors de la mise √† jour de hvalue:", error);
                    }
                });
            });

            currentMode = data.mode;
            toggleModeBtn.textContent = `Passer au mode ${currentMode === "auto" ? "manuel" : "automatique"}`;
        } catch (error) {
            console.error(error);
            ecowattDataDiv.innerHTML = `<pre>Erreur: ${error.message}</pre>`;
        }
    }

    // Fonction pour contr√¥ler le relais
    async function controlRelay(state) {
        try {
            const relayState = state ? "allumer" : "√©teindre";
            await fetch("http://127.0.0.1:8000/phidget", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ relay: 1, state })
            });
            console.log(`Relais 1 ${relayState}`);
        } catch (error) {
            console.error("Erreur lors du contr√¥le du relais:", error);
        }
    }

    // Rafra√Æchir les donn√©es EcoWatt
    refreshDataBtn.addEventListener("click", async () => {
        try {
            await fetch("http://127.0.0.1:8000/refresh", { method: "POST" });
            fetchEcowattData();
        } catch (error) {
            console.error("Erreur lors du rafra√Æchissement des donn√©es:", error);
        }
    });

    // Contr√¥le des relais en mode manuel
    relayButtons.forEach(button => {
        button.addEventListener("click", async () => {
            if (currentMode !== "manual") return;
            const relay = button.getAttribute("data-relay");
            const state = button.classList.toggle("active");
            try {
                await fetch("http://127.0.0.1:8000/phidget", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ relay: parseInt(relay), state })
                });
            } catch (error) {
                console.error("Erreur lors du contr√¥le du relais:", error);
            }
        });
    });

    // Rafra√Æchir l'√©tat des relais
    const refreshRelayStateBtn = document.getElementById("refreshRelayState");
    const relayStateText = document.getElementById("relayState");

    refreshRelayStateBtn.addEventListener("click", async () => {
        try {
            const response = await fetch("http://127.0.0.1:8000/get_relays_state");
            if (!response.ok) {
                throw new Error("Erreur lors de la r√©cup√©ration de l'√©tat du relais");
            }
            const data = await response.json();
            const relayState = data[0];  // R√©cup√®re l'√©tat du relais 0
            relayStateText.textContent = `√âtat actuel du relais 0 : ${relayState ? 'Allum√©' : '√âteint'}`;
        } catch (error) {
            console.error("Erreur lors du rafra√Æchissement de l'√©tat du relais:", error);
            relayStateText.textContent = `Erreur : ${error.message}`;
        }
    });

    // Initialiser le mode d√®s que possible
    fetchCurrentMode();

    // Rafra√Æchir les donn√©es EcoWatt √† intervalle
    setInterval(fetchEcowattData, 3600000); // Met √† jour toutes les heures
});
